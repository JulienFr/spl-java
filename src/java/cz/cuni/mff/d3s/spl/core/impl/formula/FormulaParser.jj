/*
 * Copyright 2013 Charles University in Prague
 * Copyright 2013 Vojtech Horky
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
options {
	STATIC = false;
	SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(FormulaParser)
package cz.cuni.mff.d3s.spl.core.impl.formula;

import java.util.*;

import cz.cuni.mff.d3s.spl.core.Formula;
import cz.cuni.mff.d3s.spl.core.Data;
import cz.cuni.mff.d3s.spl.core.MathematicalInterpretation;
import cz.cuni.mff.d3s.spl.core.Result;
import cz.cuni.mff.d3s.spl.core.impl.SimpleFormulas;
import cz.cuni.mff.d3s.spl.core.impl.formula.Comparison;

class FormulaParser {
	public static Formula parse(String formula) throws ParseException {
		FormulaParser parser = new FormulaParser(formula);
		return parser.splFormula();
	}
	
	private static class DummyFormula implements Formula {
		public static Formula INSTANCE = new DummyFormula();
		
		private DummyFormula() {
		}
		
		@Override
		public void setInterpreation(MathematicalInterpretation interpretation) {
		}

		@Override
		public void bind(String variable, Data data) {
		}

		@Override
		public Result evaluate() {
			return Result.CANNOT_COMPUTE;
		}
	}
	
	public FormulaParser(String formula) {
		this(new java.io.BufferedReader(new java.io.StringReader(formula)));
	}
}

PARSER_END(FormulaParser)

SKIP :
{
	< " " >
	| < "\t" >
	| < "\n" >
	| < "\r" >
}

TOKEN : {
	<IDENTIFIER: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
	| <REAL: (["0"] | ( ["1"-"9"] ( ["0"-"9"] )* )) ("." ( ["0"-"9"] )* ) >
	| <INT: ["0"] | ( ["1"-"9"] ( ["0"-"9"] )* ) >
	| <CMP_GT: ">">
	| <CMP_LT: "<">
	| <LOGIC_AND: "&&">
	| <LOGIC_OR: "||">
	| <LEFT_PAREN: "(">
	| <RIGHT_PAREN: ")">
}

Formula splFormula():
{
	Formula tmp;
}
{
	tmp = logicFormulaOr() {
		return tmp;
	}
}

Formula logicFormulaOr():
{
	List<Formula> parts = new LinkedList<Formula>();
	Formula tmp = null;
}
{
	tmp = logicFormulaAnd() { parts.add(tmp); } ( <LOGIC_OR> tmp = logicFormulaAnd() { parts.add(tmp); } )* {
		Formula result = parts.get(0); 
		for (int i = 1; i < parts.size(); i++) {
			result = new LogicOr(result, parts.get(i));
		}
		return result;
	}
}

Formula logicFormulaAnd():
{
	List<Formula> parts = new LinkedList<Formula>();
	Formula tmp;
}
{
	tmp = logicFormulaAtomic() { parts.add(tmp); } ( <LOGIC_AND> tmp = logicFormulaAtomic() { parts.add(tmp); } )* {
		Formula result = parts.get(0); 
		for (int i = 1; i < parts.size(); i++) {
			result = new LogicAnd(result, parts.get(i));
		}
		return result;
	}
}

Formula logicFormulaAtomic():
{
	Formula atomic;
}
{
	atomic = plainComparison() {
		return atomic;
	}
	| <LEFT_PAREN> atomic = splFormula() <RIGHT_PAREN> {
		return atomic;
	}
}

Formula plainComparison():
{
	String left;
	String right;
	Comparison.Operator op;
}
{
	left = sourceName() op = comparisonOperator() right = sourceName() {
		return new Comparison(left, right, op);
	}
}

String sourceName():
{
	Token name;
}
{
	name = <IDENTIFIER> {
		return name.image;
	}
}

Comparison.Operator comparisonOperator():
{}
{
	<CMP_GT> {
		return Comparison.Operator.GT;
	}
	| <CMP_LT> {
		return Comparison.Operator.LT;
	}
}
